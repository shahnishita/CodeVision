import streamlit as st
import google.generativeai as genai
from PIL import Image
import io
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure API Key
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

def generate_code(prompt, language="python"):
    model = genai.GenerativeModel("gemini-1.5-flash")
    response = model.generate_content(prompt)
    return response.text, language

def generate_image(prompt):
    model = genai.GenerativeModel("gemini-1.5-pro-vision")
    response = model.generate_content(prompt)
    return response  # Modify handling based on actual response format

# Custom CSS for styling
st.markdown(
    """
    <style>
        html, body, [class*="st"] {
            background: linear-gradient(135deg, #8e2de2, #4a00e0, #fc6076, #ff9a9e);
            background-attachment: fixed;
            color: white;
            font-family: 'Arial', sans-serif;
        }
        @keyframes gradientAnimation {
            0% { background-position: 0%,50%; }
            50% { background-position: 100%, 50%; }
            100% { background-position: 0%, 50%; }
        }
        .stButton>button {
            background: #ff69b4;
            color: white;
            font-size: 16px;
            border-radius: 12px;
            padding: 10px 20px;
            transition: all 0.3s ease-in-out;
        }
        .stButton>button:hover {
            background: #ff1493;
            transform: scale(1.05);
        }
        .stTextInput>div>div>input {
            border-radius: 10px;
            border: 2px solid #ff69b4;
            font-size: 16px;
            padding: 10px;
        }
        .stRadio>div {
            color: white;
            font-size: 18px;
        }
    </style>
    """,
    unsafe_allow_html=True,
)

# Streamlit UI
st.title("🌟AI Code & Image Generator 🎨")
st.write("Enter a prompt and choose whether to generate code or an image.")

# Dark/Light Mode Toggle
dark_mode = st.toggle("🌙 Dark Mode")
if dark_mode:
    st.markdown(
        """
        <style>
            html, body, [class*="st"] {
                background: black;
                color: white;
            }
        </style>
        """,
        unsafe_allow_html=True,
    )

# User selects mode
option = st.radio("Select what to generate:", ["Code", "Image"])

# User input prompt
user_prompt = st.text_area("Enter your prompt:")

if option == "Code":
    language = st.selectbox("Select Code Language:", ["python", "javascript", "java", "c++", "html", "css"])

# Generate button with loading animation
if st.button("🚀 Generate"):
    if user_prompt:
        with st.spinner("Generating... Please wait ⏳"):
            if option == "Code":
                generated_code, lang = generate_code(user_prompt, language)
                st.subheader("📜 Generated Code:")
                st.code(generated_code, language=lang)
                st.download_button("💾 Download Code", generated_code, file_name=f"generated_code.{lang}")
            else:
                generated_image = generate_image(user_prompt)
                st.subheader("🖼️ Generated Image:")
                st.image(generated_image, caption="Generated by Gemini AI")
                
                if isinstance(generated_image, Image.Image):
                    img_byte_arr = io.BytesIO()
                    generated_image.save(img_byte_arr, format='PNG')
                    st.download_button("📥 Download Image", img_byte_arr.getvalue(), file_name="generated_image.png", mime="image/png")
    else:
        st.warning("⚠️ Please enter a prompt before generating.")